    // do not edit this file
    .arch armv6             // armv6 architecture
    .arm                    // arm 32-bit instruction set
    .fpu vfp                // floating point co-processor
    .syntax unified         // modern sytax

    // global constants
    #include "cw.h"

    // name imports
    .extern     buffer
    .extern     stderr
    .extern     fprintf

    .section .rodata
.Lmsg1:
    .string "%s: Too many args\nUsage: %s [file]\n"
.Lmsg2:
    .string "%s: open failed: %s\n"

    .text
    //////////////////////////////////////////////////////
    // int setup(int argc, char **argv)                                     //
    //
    // returns 0 on success
    //        -1 on failure
    //////////////////////////////////////////////////////
    .global setup                   // global for linking to
    .type   setup, %function        // define as a function
    .equ    O_RDONLY, 0             // open in read only mode
    .equ    MODE, 0                 // mode flags for open
    .equ    OSOPEN, 5               // syscall # for open() 
    .equ    OSCLOSE, 6              // syscall # for close() 
    .equ    OSDUP2, 63              // syscall # for dup2() 
    .equ    ARGV0, 0                // pointer offset for arg0
    .equ    ARGV1, 4                // pointer offset for arg1
    .equ    FP_OFF, 12              // fp offset in main stack frame

setup:
    // function prologue
    push    {r4, r7, fp, lr}        // save fp and lr on stack
    add     fp, sp, FP_OFF          // set frame pointer to frame base

    mov     r4, r1                  // save argv
    cmp     r0, 1                   // how many args
    beq     .Lonearg                // no supplied file, use stdin
    cmp     r0, 2                   // are there more than two args
    bgt     .Largcnt                // if so bad arg cnt
    ldr     r0, [r4, ARGV1]         // get argv[1] which has the filename
    mov     r1, O_RDONLY            // open in read mode
    mov     r2, MODE                // mode not used here
    mov     r7, OSOPEN              // syscall number for open()
    svc     0                       // syscall
    cmp     r0, 0                   // if < 0 the syscall failed
    blt     .Lofail
    mov     r1, 0                   // move to fd to 0 with dup2
    mov     r7, OSDUP2              // sycall number of dup()
    svc     0                       // syscall
    cmp     r0, 0                   // if 0 dup2 worked
    bne     .Lofail                 // otherwise it failed
    b       .Lexit

.Largcnt:
    // incorrect arg count
    ldr     r0, =stderr             // fprintf FILE *stderr
    ldr     r0, [r0] 
    ldr     r1, =.Lmsg1             // format string
    ldr     r2, [r4, ARGV0]         // ptr to program name
    mov     r3, r2                  // same arg used twice in format
    bl      fprintf
    mov     r0, -1                  // return -1 as failure
    b       .Lexit

.Lofail:
    // open() or dup2() failed
    ldr     r0, =stderr             // get fprintf FILE *stderr
    ldr     r0, [r0]                // format string
    ldr     r1, =.Lmsg2
    ldr     r2, [r4, ARGV0]         // name of program
    ldr     r3, [r4, ARGV1]         // name of file
    bl      fprintf
    mov     r0, -1                  // return -1 as failure
    b       .Lexit

.Lonearg:
    mov     r0, 0                   // no args just read fd 0

.Lexit:
    // function epilogue
    sub     sp, fp, FP_OFF          // restore stack frame top
    pop     {r4, r7, fp, lr}        // remove frame and restore
    bx      lr                      // return to caller

    // function footer
    .size   setup, (. - setup)      // set size for function
.end
